#+startup: latexpreview
#+include: "~/org/header.org"

#+begin_center
*Лабораторная 3*

Моисеев M32001, Муров M32011


#+end_center

#+latex: \clearpage

* LU - разложение
Для матрицы

#+begin_example
[[1 2 3]
 [4 5 6]
 [7 8 9]]
#+end_example

 разложение вышло следующим:
 #+begin_example
    [[1. 0. 0.]
 L=  [2. 1. 0.]
     [3. 2. 1.]]
    [[ 1.  4.  7.]
 U=  [ 0. -3. -6.]
     [ 0.  0.  0.]]
#+end_example

* Поиск обратной матрицы:

Для невырожденной матрицы
#+begin_example
[[1 2 3]
 [4 5 6]
 [7 8 0]]
#+end_example

Получаем такую обратную матрицу
#+begin_example
 [[-1.77  0.88 -0.11]
 [ 1.55 -0.77  0.22]
 [-0.11  0.22 -0.11]]
#+end_example

Для проверки перемножим их, получаем единичную матрицу

В качестве итерационного метода был взят метод Зейделя

Для тестирования были выбраны матрицы с различными диагональными преобладаниями. Диагональное преобладание дает итерационному методу схождение к точному решению

#+begin_example
k\n       5    10    15    20     25
 0   [    7    18    29    41    56]
 1   [  170   392   715  1111  1539]
 2   [    7  2158  3688  5922  8655]
 3   [    6  1225 11363 19824 33905]
 #+end_example

При этом погрешность возрастает по похожему закону
#+begin_example
[[0 0 0 0 0]
[1.42e-01 3.02e-01 3.35e-01 3.99e-01 4.76e-01]
[1.55 2.67 3.54 4.20 4.67]
[7.78 2.54e+01 3.54e+01 3.99e+01 4.80e+01]
#+end_example
Последнюю строчку с трудом можно назвать удовлетворительным результатом.
Для нового алгоритма метода Зейделя максимум удалось получить решение для n = 500, 823 итерации, примерно 4 минуты.

Для функции Гильберта количество шагов и погрешность растет сильно быстрее

начало $n=5$ ,шаг 5
dx - среднее отклонение от истинного значения.
#+begin_example
steps=53
dx=0.639717522055063
steps=172
dx=0.968265045128112
steps=470
dx=0.9200272499839462
steps=439
dx=1.5035776564829042
steps=938
dx=1.3637934856130796
#+end_example

Чтобы проверить максимум возможностей самостоятельно написанных разреженных матриц, мы дополнительно создали тест почти диагональных матрицах: Практически во всех недиагональных элементах нули. Это позволяет проверить потолок возможностей алгоритма зейделя и создать матрицу размера 10^6
Зависимость от времени 

#+CAPTION: Время работы решения СЛАУ при помощи LU-разложения в зависимости от размера матрицы
[[../../primat/lab3/pics/t(n)almostDiagLU.png]]

#+CAPTION: Время работы решения СЛАУ при помощи алгоритма Зейделя в зависимости от размера матрицы
[[../../primat/lab3/pics/t(n)almostDiagZeidel.png]]

Также было рассмотрено время работы относительно числа обусловленности и размера матрицы на функции с переменным значением диагонального преобладания.
n - размерность матрицы
k - параметр из функции, влияет на диагональное преобладание, чем больше k, тем оно меньше.
цветом показано время работы.

#+CAPTION: Время работы решения СЛАУ при помощи алгоритма Зейделя.
[[../../primat/lab3/pics/time(k,n)Zeydel.png]]

Резкое падение времени работы метода Зейделя говорит о том, что вычисления не достигают приемлимой точности. Подсчет происходит быстро и неправильно. Также видно, что время работы сильно зависит от диагонального преобладания.

#+CAPTION: Время работы решения СЛАУ при помощи LU-разложения.
[[../../primat/lab3/pics/time(k,n)LU.png]]

На матрице Гильберта зависимость выглядит следующим образом:

#+CAPTION: LU
[[../../primat/lab3/pics/t(n)gilbertLU.png]]

#+CAPTION: Зейдель
[[../../primat/lab3/pics/t(n)gilbertZeydel.png]]

#+CAPTION: Средняя ошибка при решении методом Зейделя
[[../../primat/lab3/pics/errorZeydel.png]]
